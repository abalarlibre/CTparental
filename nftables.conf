
## infos sur les tables crées par ctparental .
# table ip filter
# table ip nat
# table ip6 filter
# table ip6 nat
# dans toute les tables les chaines suivantes sont crée:
# input pour INPUT
# output pout OUTPUT
# forward pour FORWARD
# dans les tables nat et nat6 les chaines supplémentaires sont crée:
# prerouting pour PREROUTING
# postrouting pour POSTROUTING
# use this variables for logs
# LOG4ACCEPT=log prefix ip4tables-accept
# LOG4REJECT=log prefix ip4tables-reject
# LOG6ACCEPT=log prefix ip6tables-accept
# LOG6REJECT=log prefix ip6tables-reject
# exemple :
# nft add rule ip filter output ct state new $LOG4ACCEPT accept
#
    ### on autorise tous le trafic sortant vers internet.###
#nft add rule ip filter output ct state new $LOG4ACCEPT accept
#nft add rule ip6 filter output ct state new $LOG6ACCEPT accept

    ### on autorise tous le trafic sortant à destination de notre lan (PC imprimante de la maison)
nft add rule ip filter output ip daddr $reseau_box_ipv4 ct state new $LOG4ACCEPT accept
#nft add rule ip6 filter output ip6 daddr $reseau_box_ipv6_g ct state new $LOG6ACCEPT accept

    ### on acepte tous le trafic entrant en provenence de notre lan (PC imprimante de la maison)
nft add rule ip filter input ip daddr $reseau_box_ipv4 ct state new $LOG4ACCEPT accept
#nft add rule ip6 filter input ip6 daddr $reseau_box_ipv6_g ct state new $LOG6ACCEPT accept

    ### IMAP smtp pop ###
nft add rule ip filter output tcp dport { 143, 993, 995, 465, 587 } ct state new $LOG4ACCEPT accept
nft add rule ip6 filter output tcp dport { 143, 993, 995, 465, 587 } ct state new $LOG4ACCEPT accept


